Learn
Learn to start thinking like a software engineer
Software engineers use computer programming languages to build interesting tools by “speaking” directly to the computer.

What is a programming language? What types of tasks can be accomplished using code? How is it similar or different from the human languages we speak? And how do programmers continue to grow their skillset to dynamically solve the problems that arise on the job?

These questions will be addressed in this objective. You should come away with a basic understanding of how to think like a computer programmer.

Overview
How do we think like a Software Engineer?
What is a software engineer?
In the most direct sense, a software engineer is someone who writes computer code in order to create and maintain software. Software engineers must understand computer languages in order to build software, but more importantly, they need to be able to think on their feet. Software engineers are often required to maintain, expand, and debug existing codebases. They also may be asked to learn new languages or frameworks on the job. The greatest skill a software engineer must possess is being able to stay calm in the face of a complex problem, and using his or her own creativity (and with the aid of online resources), he or she finds the solution to that problem.

How do we communicate with computers to accomplish tasks?
Computers are everywhere: in our office, in our pocket, in our cars, etc. We have become so accustomed to having them in our everyday lives that we often fail to recognize how complex they truly are. Many people never stop to ask how these devices work, as if assuming they are running on magic. What we often fail to realize is that every computer is following instructions that a human wrote for it in a set of languages that computers understand. Knowing these languages, a programmer can instruct computers to do almost anything imaginable – build a website, create an AI chess player, store and retrieve data in a database, and even drive our cars for us.

While the specifics can look wildly different based on what type of task we’re trying to accomplish and what language we’re working with, there are three basic steps to writing code: 1) understand the rules of the language, 2) use those rules to construct a set of instructions (write a program), and 3) allow the computer to read those instructions (execute the program).

How do we learn a programming language?
Learning your first computer language can be intimidating. It requires a level of precision that we may not be used to. However, just like human languages, the more programming languages you learn, the easier it gets.

In most computer languages the core building blocks are keywords and syntax. Keywords are special words built into the language that cue the computer as to what your intentions are. For example, in JavaScript the keyword ‘const’ tells the computer that you are about to store a piece of data in memory. These keywords are built into the language and are designed to accomplish specific tasks. Syntax is a built-in system of “grammar” that each language has. It tells us how we are supposed to construct commands, such as the word order and the use of symbols and punctuation (such as brackets, semicolons, and equal signs).

By knowing the keywords and symbols in a language (syntax) we can construct valid commands which give the computer precise instructions on how to execute certain tasks.

Luckily, each language has its keywords and syntax well documented online. Languages have official reference pages where you can see lists of keywords and examples of how to use them. We can use a variety of other resources as well, such as YouTube, StackOverflow, and coding blogs, to see examples and explanations of these languages.

Which language should we learn?
There are a multitude of computer programming languages and they can differ in the grammar structure, spelling, meanings of words, and intent. New languages are usually created when a group of programmers finds the current languages lacking in an area they are working on. In turn, most languages are specialized in specific areas (web development, gaming, databases, and etc).

We’ll be covering these three web development languages in our course: HTML, CSS, and JavaScript. They are a great place to start. As you move through Lambda School and then your career, you will learn more languages as the need arises, but as we mentioned, the more you know, the easier it gets to learn a new one.

Where do we write code (text editors and sandbox environments)?
In most of Lambda School and our careers, we’ll be writing code directly in a text editor. Some great free text editors we recommend are Sublime, Atom, and VSCode. In this course, however, we will not need a text editor. We will be writing our code directly in sandbox environments (e.g., CodePen and repl.it). Sandbox environments are websites designed to allow you to write and immediately run small pieces of code. They are great learning tools for beginners and excellent debugging tools for experts.

How do we execute code?
After we have written a bit of computer code, we must actually feed our instructions to the computer. This process is called executing, or running, the code. The exact process of running code can vary depending on the language and the task at hand. For example, a bit of HTML code can be run by opening an HTML file using a web browser. However, if we were to open a C++ file directly in the browser, nothing would happen.

In this course, we will be using two sandbox environments to both write and execute our code: CodePen and repl.it. The first automatically runs our code as we write it while the second runs it with the click of a button. Executing our code will be very straightforward in this course. It’s something that we need to keep considering as we continue to grow as programmers.

Learn to explain what web development is and the roles of HTML, CSS, and JavaScript in creating web content
The focus of Web Dev 101 (and the Lambda School main curriculum) is web development: the branch of software engineering focused around building and maintaining web content. We’ll be exploring on a conceptual level the different tools that are used to build sites and the specific concerns that web developers have to address.

Overview
What is web development?
Web development is a specific field of software engineering that focuses on building web pages. Web pages, or web apps, are codebases that are downloaded and run in our web browser (e.g., Google Chrome) each time a user navigates to the website address. This differs from other software which is usually downloaded once and run as a standalone application on your computer or phone. Web development makes for an exciting career, as a web development cycle is usually much shorter and you get to iterate over your software at a much faster rate.

The major building blocks of the web are HTML, CSS, and JavaScript. We will be talking about all three languages in Web Dev 101. We can also think of web development as being split into two main categories: front end and back end. We will discuss what each entails, but this two-week course focuses on front end web development. Both are covered in detail in the Lambda School main curriculum.

What is meant by the term front end?
Everything you have ever seen on the web is considered ‘front end’. Front end is what we see when we open a web page or app. Code is downloaded from a server and is rendered to the screen by a web browser. What happens when we interact with the code is also considered front end. This is often referred to as the ‘Presentation Layer’ or ‘Client’ in software development terms.

The front end is built out of three languages: HTML, CSS, and JavaScript. HTML allows us to put content on our page: text, headers, images, buttons, links, and etc. CSS is used to style our page. It allows the contents to have different text colors, background colors, as well as dealing with the positioning of the content on the page. JavaScript makes our page dynamic. It allows for the content to change on a mouse hover or click and also lets us submit data and have data rendered on our page (such as submitting a new blog post or having your feed populated when you open Facebook). We will be exploring each of these languages in more detail throughout Web Dev 101.

What is meant by the term back end?
This term usually refers to what happens ‘behind the scenes’: servers, databases, etc. The back end is the place we don’t see as users. This consists of data storage (databases) and servers running to provide data for the front end. Back end can be a little harder to imagine, especially for someone without much experience with it. Back end is commonly referred to as the ‘data access layer’ or ‘server’ within software development terms. The back end computes the data and content sent to the front end to be used and displayed by your browser.

Back end server code can be written using JavaScript. However, it can be also written using many other languages, such as Ruby, Java, or Python. The database logic required in back end development often utilize a database language, such as SQL or MongoDB.

We will not be covering any back end within web dev 101, but the JavaScript skills we are developing are core building blocks to writing a JavaScript backend server. Back end development (including servers and databases) is covered extensively in the full course.

What is a framework?
Real world web development relies heavily on the use of frameworks. Frameworks aren’t exactly new languages, but are more like add-ons to existing languages. These frameworks slightly change the rules and syntax of a language, but save us a lot of time and effort in writing web development code.

For example, a CSS framework like Bootstrap will require us to write our CSS using slightly different rules than regular (vanilla) CSS. It will also limit the level of customization we can do using CSS. But the drawbacks are often worth it, because Bootstrap makes styling our sites far easier and allows us to create mobile-friendly pages with minimal effort.

We do not cover any frameworks in Web Dev 101, but we will learn Bootstrap and React (a JavaScript framework) in the main curriculum.

What are unique challenges web developers face?
While there are a lot of pros in developing software for use on the web, there are some cons as well. These can be unique challenges to a web developer.

Load times. Do you ever go to a website and it takes forever to load? What is your reaction? We usually get frustrated and leave. In fact, most users will leave a site if it does not load for them in 15 seconds or less! As mentioned earlier, connection speed is a large hurdle to overcome when dealing with web development. A user’s speed can range from very fast (Fiber optic) to slow (mobile 3G or satellite). It is our job as web developers to take ALL users into account. Therefore, we learn tricks to keep users engaged while our code is being downloaded, and learn to keep our code small so it can be easily downloaded.

Different Browsers. Not only do we have to worry about load times, but also differences in browser technology. Mobile browsers are different than desktop (or laptop) browsers. Older browsers (many computers still use Windows XP and IE9) are extremely different than newer browsers, and developing for each provides a unique challenge. Ultimately you will need to make sacrifices and not support some browsers (which is a call marketing department will make) but you should be able to code for the browser you do support.

Accessibility. If you are not a person that uses an accessibility device to consume software on the web, then you may have no idea these exist. Screen readers, alternative keyboards/navigation devices, devices for the hearing impaired, the color blind, font sizes for visually impaired people, are all concepts that we tend to not think about. As a web developer, you will need to start thinking about these users not only from a human decency perspective, but also because these users make up a non-insignificant market share. There are also legal issues that require accessibility.
